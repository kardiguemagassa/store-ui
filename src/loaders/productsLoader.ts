import apiClient from "../api/apiClient";
import type { Product } from "../types/product";

// Loader function pour React Router
// Cette fonction est appel√©e AVANT le rendu du composant Home
// Elle charge les donn√©es des produits depuis l'API de mani√®re asynchrone
// Le type de retour Promise<Product[]> garantit qu'on retourne bien un tableau de produits
export async function productsLoader(): Promise<Product[]> {
  try {
    // Requ√™te GET vers l'API backend
    // apiClient.get<Product[]> : le <Product[]> est un type g√©n√©rique TypeScript
    // qui indique √† Axios le format attendu de response.data
    // "/products" est ajout√© √† la baseURL d√©finie dans apiClient (http://localhost:8080/api/v1)
    // URL compl√®te : http://localhost:8080/api/v1/products
    const response = await apiClient.get<Product[]>("/products");
    
    // Log de debug pour v√©rifier les donn√©es re√ßues
    // Visible dans la console du navigateur (F12 > Console)
    console.log("Products loaded:", response.data);
    
    // Retourne les donn√©es au composant qui utilise useLoaderData()
    // React Router met automatiquement ces donn√©es en cache
    return response.data;
    
  } catch (error: unknown) {
    // Bloc catch : g√®re toutes les erreurs possibles
    // error: unknown : TypeScript force √† typer explicitement pour la s√©curit√©
    console.error("Failed to load products:", error);
    
    // Messages d'erreur par d√©faut
    // Ces valeurs seront utilis√©es si on ne peut pas extraire d'info de l'erreur
    let errorMessage = "Failed to fetch products. Please try again.";
    let errorStatus = 500; // Code HTTP 500 = Internal Server Error
    
    // Type narrowing : v√©rification progressive du type d'erreur
    // TypeScript ne sait pas automatiquement quel type d'erreur on a attrap√©
    
    // Premi√®re v√©rification : est-ce un objet avec une propri√©t√© "response" ?
    // Cela correspond aux erreurs Axios (erreurs HTTP de l'API)
    if (error && typeof error === "object" && "response" in error) {
      // Cast TypeScript : on indique explicitement la structure de l'erreur Axios
      // axiosError.response existe quand le serveur a r√©pondu (m√™me avec erreur 4xx, 5xx)
      // axiosError.message existe toujours (erreur r√©seau, timeout, etc.)
      const axiosError = error as {
        response?: { status?: number; data?: { message?: string } };
        message?: string;
      };
      
      // Extrait le message d'erreur (si disponible, sinon garde le message par d√©faut)
      errorMessage = axiosError.message || errorMessage;
      
      // Extrait le code HTTP (404, 500, etc.) si le serveur a r√©pondu
      // √† afficher erreur de backend ====================>
      errorStatus = axiosError.response?.status || errorStatus;
      
    // Deuxi√®me v√©rification : est-ce une erreur JavaScript standard ?
    // Exemple : new Error("Something went wrong")
    } else if (error instanceof Error) {
      errorMessage = error.message;
    }
    
    // üö® Throw d'une Response : format sp√©cial pour React Router
    // throw new Response() : d√©clenche l'errorElement d√©fini dans les routes
    // React Router capte cette erreur et affiche ErrorPage.tsx
    // { status: errorStatus } : permet √† ErrorPage de savoir quel type d'erreur (404, 500, etc.)
    throw new Response(errorMessage, { status: errorStatus });
  }
}